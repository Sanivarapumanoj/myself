{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Z8_nvyRXVDC"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('Tweets.csv')\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "import re\n",
        "df = pd.read_csv('Tweets.csv')\n",
        "df = df.drop_duplicates()\n",
        "df['text'] = df['text'].str.lower()\n",
        "df['text'] = df['text'].apply(lambda x: re.sub(r'https?://[^\\s]+|www\\.[^\\s]+|\\@[^\\s]+', '', x))\n",
        "df['text'] = df['text'].apply(lambda x: re.sub(r'[^\\w\\s]', '', x))\n",
        "\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "df['text'] = df['text'].apply(lambda x: nltk.word_tokenize(x))\n",
        "\n",
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "stop_words = set(stopwords.words('english'))\n",
        "df['text'] = df['text'].apply(lambda x: [word for word in x if word not in stop_words])\n",
        "\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "df['text'] = df['text'].apply(lambda x: ' '.join(x))\n",
        "df.to_csv('preprocessed_dataset.csv', index=False)\n",
        "\n",
        "df.head()"
      ],
      "metadata": {
        "id": "H8EP3757aItq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from joblib import dump\n",
        "\n",
        "df = pd.read_csv('preprocessed_dataset.csv')\n",
        "df['text'].fillna('',inplace=True)\n",
        "\n",
        "X = df['text']\n",
        "y = df['airline_sentiment']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "tfidf_vectorizer = TfidfVectorizer()\n",
        "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
        "X_test_tfidf = tfidf_vectorizer.transform(X_test)\n",
        "\n",
        "classifier = MultinomialNB()\n",
        "classifier.fit(X_train_tfidf, y_train)\n",
        "\n",
        "y_pred = classifier.predict(X_test_tfidf)\n",
        "\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "classification_rep = classification_report(y_test, y_pred, target_names=df['airline_sentiment'].unique())\n",
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy:.2f}')\n",
        "print('Classification Report:')\n",
        "print(classification_rep)\n",
        "print('Confusion Matrix:')\n",
        "print(confusion)"
      ],
      "metadata": {
        "id": "esNxKVeRaViN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dump(classifier, 'sentiment_model.joblib')\n",
        "\n",
        "sample_texts = [\"I love this airline!\", \"The service is terrible.\", \"Neutral comment.\"]\n",
        "sample_tfidf = tfidf_vectorizer.transform(sample_texts)\n",
        "sample_predictions = classifier.predict(sample_tfidf)\n",
        "\n",
        "for text, prediction in zip(sample_texts, sample_predictions):\n",
        "  print(f\"Text: {text}\")\n",
        "  print(f\"Predicted Sentiment: {prediction}\")\n",
        "  print(\"\")"
      ],
      "metadata": {
        "id": "lgBDIOwVaqg6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "sentiment_counts = df['airline_sentiment'].value_counts()\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=df, x='airline_sentiment', order=sentiment_counts.index)\n",
        "plt.title('Sentiment Distribution')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Count')\n",
        "plt.show()\n",
        "\n",
        "airline_counts = df['airline'].value_counts()\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.countplot(data=df, x='airline', order=airline_counts.index)\n",
        "plt.title('Airline Distribution')\n",
        "plt.xlabel('Airline')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "O8ggFS4lbIhG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "confusion = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(confusion, annot=True, fmt='d', cmap='Blues',\n",
        "xticklabels=['Negative', 'Neutral', 'Positive'],\n",
        "yticklabels=['Negative', 'Neutral', 'Positive'])\n",
        "plt.title('Confusion Matrix')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "mzlBHt3nbQYB"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}